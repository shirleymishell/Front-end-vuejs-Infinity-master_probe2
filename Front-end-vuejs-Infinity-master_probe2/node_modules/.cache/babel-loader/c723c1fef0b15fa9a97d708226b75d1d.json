{"remainingRequest":"C:\\Users\\PC\\3D Objects\\Front-end-vuejs-Infinity-master\\Front-end-vuejs-Infinity-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\PC\\3D Objects\\Front-end-vuejs-Infinity-master\\Front-end-vuejs-Infinity-master\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\PC\\3D Objects\\Front-end-vuejs-Infinity-master\\Front-end-vuejs-Infinity-master\\src\\vue-apollo.js","dependencies":[{"path":"C:\\Users\\PC\\3D Objects\\Front-end-vuejs-Infinity-master\\Front-end-vuejs-Infinity-master\\src\\vue-apollo.js","mtime":1562456239885},{"path":"C:\\Users\\PC\\3D Objects\\Front-end-vuejs-Infinity-master\\Front-end-vuejs-Infinity-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\3D Objects\\Front-end-vuejs-Infinity-master\\Front-end-vuejs-Infinity-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\PC\\3D Objects\\Front-end-vuejs-Infinity-master\\Front-end-vuejs-Infinity-master\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\PC\\\\3D Objects\\\\Front-end-vuejs-Infinity-master\\\\Front-end-vuejs-Infinity-master\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\PC\\\\3D Objects\\\\Front-end-vuejs-Infinity-master\\\\Front-end-vuejs-Infinity-master\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread2\";\nimport Vue from 'vue';\nimport BootstrapVue from 'bootstrap-vue';\nimport VueApollo from 'vue-apollo';\nimport { createApolloClient, restartWebsockets } from 'vue-cli-plugin-apollo/graphql-client';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap-vue/dist/bootstrap-vue.css'; // Install the vue plugin\n\nVue.use(VueApollo); // Name of the localStorage item\n\nvar AUTH_TOKEN = 'apollo-token'; // Http endpoint\n\nvar httpEndpoint = process.env.VUE_APP_GRAPHQL_HTTP || 'http://localhost:4000/graphql'; // Config\n\nvar defaultOptions = {\n  // You can use `https` for secure connection (recommended in production)\n  httpEndpoint: httpEndpoint,\n  // You can use `wss` for secure connection (recommended in production)\n  // Use `null` to disable subscriptions\n  wsEndpoint: null,\n  // LocalStorage token\n  tokenName: AUTH_TOKEN,\n  // Enable Automatic Query persisting with Apollo Engine\n  persisting: false,\n  // Use websockets for everything (no HTTP)\n  // You need to pass a `wsEndpoint` for this to work\n  websocketsOnly: false,\n  // Is being rendered on the server?\n  ssr: false // Override default apollo link\n  // note: don't override httpLink here, specify httpLink options in the\n  // httpLinkOptions property of defaultOptions.\n  // link: myLink\n  // Override default cache\n  // cache: myCache\n  // Override the way the Authorization header is set\n  // getAuth: (tokenName) => ...\n  // Additional ApolloClient options\n  // apollo: { ... }\n  // Client local data (see apollo-link-state)\n  // clientState: { resolvers: { ... }, defaults: { ... } }\n  // Call this in the Vue app file\n\n};\nexport function createProvider() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  // Create apollo client\n  var _createApolloClient = createApolloClient(_objectSpread({}, defaultOptions, {}, options)),\n      apolloClient = _createApolloClient.apolloClient,\n      wsClient = _createApolloClient.wsClient;\n\n  apolloClient.wsClient = wsClient; // Create vue apollo provider\n\n  var apolloProvider = new VueApollo({\n    defaultClient: apolloClient,\n    defaultOptions: {\n      $query: {// fetchPolicy: 'cache-and-network',\n      }\n    },\n    errorHandler: function errorHandler(error) {\n      // eslint-disable-next-line no-console\n      console.log('%cError', 'background: red; color: white; padding: 2px 4px; border-radius: 3px; font-weight: bold;', error.message);\n    }\n  });\n  return apolloProvider;\n} // Manually call this when user log in\n\nexport function onLogin(_x, _x2) {\n  return _onLogin.apply(this, arguments);\n} // Manually call this when user log out\n\nfunction _onLogin() {\n  _onLogin = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(apolloClient, token) {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (typeof localStorage !== 'undefined' && token) {\n              localStorage.setItem(AUTH_TOKEN, token);\n            }\n\n            if (apolloClient.wsClient) restartWebsockets(apolloClient.wsClient);\n            _context.prev = 2;\n            _context.next = 5;\n            return apolloClient.resetStore();\n\n          case 5:\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](2);\n            // eslint-disable-next-line no-console\n            console.log('%cError on cache reset (login)', 'color: orange;', _context.t0.message);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 7]]);\n  }));\n  return _onLogin.apply(this, arguments);\n}\n\nexport function onLogout(_x3) {\n  return _onLogout.apply(this, arguments);\n}\n\nfunction _onLogout() {\n  _onLogout = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(apolloClient) {\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (typeof localStorage !== 'undefined') {\n              localStorage.removeItem(AUTH_TOKEN);\n            }\n\n            if (apolloClient.wsClient) restartWebsockets(apolloClient.wsClient);\n            _context2.prev = 2;\n            _context2.next = 5;\n            return apolloClient.resetStore();\n\n          case 5:\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](2);\n            // eslint-disable-next-line no-console\n            console.log('%cError on cache reset (logout)', 'color: orange;', _context2.t0.message);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[2, 7]]);\n  }));\n  return _onLogout.apply(this, arguments);\n}",{"version":3,"sources":["C:\\Users\\PC\\3D Objects\\Front-end-vuejs-Infinity-master\\Front-end-vuejs-Infinity-master\\src\\vue-apollo.js"],"names":["Vue","BootstrapVue","VueApollo","createApolloClient","restartWebsockets","use","AUTH_TOKEN","httpEndpoint","process","env","VUE_APP_GRAPHQL_HTTP","defaultOptions","wsEndpoint","tokenName","persisting","websocketsOnly","ssr","createProvider","options","apolloClient","wsClient","apolloProvider","defaultClient","$query","errorHandler","error","console","log","message","onLogin","token","localStorage","setItem","resetStore","onLogout","removeItem"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport BootstrapVue from 'bootstrap-vue'\nimport VueApollo from 'vue-apollo'\nimport { createApolloClient, restartWebsockets } from 'vue-cli-plugin-apollo/graphql-client'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'bootstrap-vue/dist/bootstrap-vue.css'\n// Install the vue plugin\nVue.use(VueApollo)\n\n// Name of the localStorage item\nconst AUTH_TOKEN = 'apollo-token'\n\n// Http endpoint\nconst httpEndpoint = process.env.VUE_APP_GRAPHQL_HTTP || 'http://localhost:4000/graphql'\n\n// Config\nconst defaultOptions = {\n  // You can use `https` for secure connection (recommended in production)\n  httpEndpoint,\n  // You can use `wss` for secure connection (recommended in production)\n  // Use `null` to disable subscriptions\n  wsEndpoint: null,\n  // LocalStorage token\n  tokenName: AUTH_TOKEN,\n  // Enable Automatic Query persisting with Apollo Engine\n  persisting: false,\n  // Use websockets for everything (no HTTP)\n  // You need to pass a `wsEndpoint` for this to work\n  websocketsOnly: false,\n  // Is being rendered on the server?\n  ssr: false,\n\n  // Override default apollo link\n  // note: don't override httpLink here, specify httpLink options in the\n  // httpLinkOptions property of defaultOptions.\n  // link: myLink\n\n  // Override default cache\n  // cache: myCache\n\n  // Override the way the Authorization header is set\n  // getAuth: (tokenName) => ...\n\n  // Additional ApolloClient options\n  // apollo: { ... }\n\n  // Client local data (see apollo-link-state)\n  // clientState: { resolvers: { ... }, defaults: { ... } }\n}\n\n// Call this in the Vue app file\nexport function createProvider (options = {}) {\n  // Create apollo client\n  const { apolloClient, wsClient } = createApolloClient({\n    ...defaultOptions,\n    ...options,\n  })\n  apolloClient.wsClient = wsClient\n\n  // Create vue apollo provider\n  const apolloProvider = new VueApollo({\n    defaultClient: apolloClient,\n    defaultOptions: {\n      $query: {\n        // fetchPolicy: 'cache-and-network',\n      },\n    },\n    errorHandler (error) {\n      // eslint-disable-next-line no-console\n      console.log('%cError', 'background: red; color: white; padding: 2px 4px; border-radius: 3px; font-weight: bold;', error.message)\n    },\n  })\n\n  return apolloProvider\n}\n\n// Manually call this when user log in\nexport async function onLogin (apolloClient, token) {\n  if (typeof localStorage !== 'undefined' && token) {\n    localStorage.setItem(AUTH_TOKEN, token)\n  }\n  if (apolloClient.wsClient) restartWebsockets(apolloClient.wsClient)\n  try {\n    await apolloClient.resetStore()\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('%cError on cache reset (login)', 'color: orange;', e.message)\n  }\n}\n\n// Manually call this when user log out\nexport async function onLogout (apolloClient) {\n  if (typeof localStorage !== 'undefined') {\n    localStorage.removeItem(AUTH_TOKEN)\n  }\n  if (apolloClient.wsClient) restartWebsockets(apolloClient.wsClient)\n  try {\n    await apolloClient.resetStore()\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('%cError on cache reset (logout)', 'color: orange;', e.message)\n  }\n}\n"]}]}